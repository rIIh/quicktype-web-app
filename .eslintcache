[{"/home/melv/code/quicktype-app/src/reportWebVitals.ts":"1","/home/melv/code/quicktype-app/src/App.tsx":"2","/home/melv/code/quicktype-app/src/index.tsx":"3","/home/melv/code/quicktype-app/src/theme.ts":"4","/home/melv/code/quicktype-app/src/components/Options.tsx":"5"},{"size":425,"mtime":1608475768641,"results":"6","hashOfConfig":"7"},{"size":5548,"mtime":1608508502897,"results":"8","hashOfConfig":"7"},{"size":641,"mtime":1608478371749,"results":"9","hashOfConfig":"7"},{"size":113,"mtime":1608506909168,"results":"10","hashOfConfig":"7"},{"size":5130,"mtime":1608507610396,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ce10yf",{"filePath":"14","messages":"15","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"/home/melv/code/quicktype-app/src/reportWebVitals.ts",[],"/home/melv/code/quicktype-app/src/App.tsx",["23","24","25","26","27"],"/home/melv/code/quicktype-app/src/index.tsx",[],"/home/melv/code/quicktype-app/src/theme.ts",["28"],"/home/melv/code/quicktype-app/src/components/Options.tsx",["29","30","31","32","33"],"import {\n  Box,\n  MenuItem,\n  Paper,\n  Select,\n  Tab,\n  Tabs,\n  FormControl,\n  InputLabel,\n  Switch,\n  FormControlLabel, TextField\n} from \"@material-ui/core\";\nimport React, {useEffect, useMemo, useState} from \"react\";\nimport Immutable from 'immutable';\nimport {\n  defaultTargetLanguages,\n  inferenceFlags,\n  defaultInferenceFlags,\n  OptionDefinition,\n  TargetLanguage\n} from 'quicktype/dist/quicktype-core';\nimport {OptionKind} from \"quicktype/dist/quicktype-core/RendererOptions\";\nimport humanizeString from \"humanize-string\";\n\nconst languageMap: Map<string, TargetLanguage> = new Map(defaultTargetLanguages.map(value => [value.name, value]));\n\nexport const Options = ({onChanged}: {\n  onChanged?: (\n    language: TargetLanguage,\n    options: Immutable.Map<OptionDefinition, any>\n  ) => void,\n}) => {\n  const [tab, setTab] = useState(0);\n  const [selectedLanguage, setLanguage] = useState(defaultTargetLanguages[0].name);\n  const language = useMemo(() => languageMap.get(selectedLanguage)!, [selectedLanguage]);\n  const [options, setOptions] = useState<Immutable.Map<OptionDefinition, any>>(Immutable.Map())\n  useEffect(\n    () => setOptions(() => Immutable.Map(language.optionDefinitions.map(option => [option, option.defaultValue]))),\n    [language]\n  );\n\n  useEffect(() => onChanged?.(language, options), [language, options]);\n\n  const panels = [\n    <Box>\n      <FormControl>\n        <InputLabel id=\"language-select-label-id\">\n          Language\n        </InputLabel>\n        <Select labelId=\"language-select-label-id\" id=\"language-select-id\" value={selectedLanguage}\n                onChange={(event) => setLanguage(event.target.value as string)}>\n          {defaultTargetLanguages.map(lang => <MenuItem key={lang.name}\n                                                        value={lang.name}>{lang.displayName}</MenuItem>)}\n        </Select>\n      </FormControl>\n      <OptionsList language={language} type={tab == 0 ? 'primary' : 'secondary'}\n                   options={options}\n                   onOptionChanged={(option, value) => setOptions(options.set(option, value))}/>\n    </Box>,\n    <Box>\n      <OptionsList language={language} type={tab == 0 ? 'primary' : 'secondary'}\n                   options={options}\n                   onOptionChanged={(option, value) => {\n                     setOptions(options.set(option, value));\n                   }}/>\n      {\n        Object.entries(inferenceFlags).map(([name, details]) => {\n          return <p key={name}>{name}: {details.description}</p>\n        })\n      }\n    </Box>,\n  ];\n\n  return (\n    <Paper style={{width: \"380px\", maxHeight: '100vh', boxSizing: 'border-box'}} elevation={6}>\n      <Box p={2}>\n        <Tabs value={tab} onChange={(event, nextValue) => setTab(nextValue)}>\n          <Tab label=\"Language\"/>\n          <Tab label=\"Other\"/>\n        </Tabs>\n        <Box height={10}/>\n        {panels[tab]}\n      </Box>\n    </Paper>\n  );\n};\n\nfunction capitalizeWords(str: string) {\n  return str.replace(/\\w\\S*/g, function (txt: string) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n}\n\nconst OptionsList = ({language, type, options, onOptionChanged}: {\n  language: TargetLanguage,\n  type: OptionKind,\n  options: Immutable.Map<OptionDefinition, any>\n  onOptionChanged: (option: OptionDefinition, value: any) => void,\n}) => {\n  return <>\n    {language.optionDefinitions\n      .filter(option => option.kind == type)\n      .map(option => {\n        if (typeof option.type() == \"boolean\") {\n          return <FormControlLabel control={<Switch value={options.get(option) ?? option.defaultValue}\n                                                    onChange={(event, checked) => onOptionChanged(option, checked)}/>}\n                                   label={option.description}/>\n        } else {\n          const isEnum = (option.legalValues?.length ?? 0) > 0;\n          if (isEnum) {\n            const legalValues = option.legalValues!;\n            return <FormControl style={{display: \"block\"}}>\n              <InputLabel id={`${option.name}-select-label-id`}>\n                {option.description}\n              </InputLabel>\n              <Select labelId={`${option.name}-select-label-id`}\n                      id={`${option.name}-select-id`}\n                      value={options.get(option) ?? option.defaultValue}\n                      onChange={(event) => {\n                        console.log(event)\n                        onOptionChanged(option, event.target.value);\n                      }}>\n                {legalValues.map(option => <MenuItem key={option}\n                                                     value={option}>{capitalizeWords(humanizeString(option))}</MenuItem>)}\n              </Select>\n            </FormControl>;\n          }\n          return <TextField label={option.description}\n                            style={{width:'100%'}}\n                            value={options.get(option) ?? option.defaultValue}\n                            onChange={event => onOptionChanged(option, event.target.value)}\n          />;\n        }\n      }).map((child, index) => <Box key={index} my={2}>{child}</Box>)}\n  </>;\n};\n",{"ruleId":"34","severity":1,"message":"35","line":1,"column":27,"nodeType":"36","messageId":"37","endLine":1,"endColumn":34},{"ruleId":"34","severity":1,"message":"38","line":19,"column":24,"nodeType":"36","messageId":"37","endLine":19,"endColumn":31},{"ruleId":"34","severity":1,"message":"39","line":25,"column":9,"nodeType":"36","messageId":"37","endLine":25,"endColumn":14},{"ruleId":"34","severity":1,"message":"40","line":27,"column":7,"nodeType":"36","messageId":"37","endLine":27,"endColumn":13},{"ruleId":"41","severity":1,"message":"42","line":137,"column":81,"nodeType":"43","messageId":"44","endLine":137,"endColumn":83},{"ruleId":"34","severity":1,"message":"45","line":1,"column":10,"nodeType":"36","messageId":"37","endLine":1,"endColumn":16},{"ruleId":"34","severity":1,"message":"46","line":18,"column":3,"nodeType":"36","messageId":"37","endLine":18,"endColumn":24},{"ruleId":"47","severity":1,"message":"48","line":42,"column":51,"nodeType":"49","endLine":42,"endColumn":70,"suggestions":"50"},{"ruleId":"41","severity":1,"message":"51","line":56,"column":50,"nodeType":"43","messageId":"44","endLine":56,"endColumn":52},{"ruleId":"41","severity":1,"message":"51","line":61,"column":50,"nodeType":"43","messageId":"44","endLine":61,"endColumn":52},{"ruleId":"41","severity":1,"message":"51","line":102,"column":37,"nodeType":"43","messageId":"44","endLine":102,"endColumn":39},"@typescript-eslint/no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'Divider' is defined but never used.","'theme' is defined but never used.","'styles' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'colors' is defined but never used.","'defaultInferenceFlags' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onChanged'. Either include it or remove the dependency array. If 'onChanged' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["52"],"Expected '===' and instead saw '=='.",{"desc":"53","fix":"54"},"Update the dependencies array to be: [language, onChanged, options]",{"range":"55","text":"56"},[1309,1328],"[language, onChanged, options]"]